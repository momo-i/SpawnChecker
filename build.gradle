buildscript {
  repositories {
    // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
    maven { url = "https://maven.minecraftforge.net" }
    mavenCentral()
    mavenLocal()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
  }
}

//apply plugin: "net.minecrell.licenser"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse" // Do not delete it, because referred from FG
apply from: "./gradle/versions.gradle"

import org.apache.tools.ant.filters.FixCrLfFilter

import static java.time.ZoneOffset.UTC
import static java.time.ZonedDateTime.now

ext {
  modid = "spawnchecker"
  javaVersion = JavaVersion.VERSION_17
  if (System.getenv("TRAVIS_BUILD_NUMBER") != null) {
    buildNumber = System.getenv("TRAVIS_BUILD_NUMBER")
    snapshot = ""
  } else {
    buildNumber = "local"
    snapshot = "-SNAPSHOT"
  }
  minecraftVersion = "1.18.1"
  minecraftVersionRange = "[1.18.1]"
  forgeVersionRange = "[39,)"
  forgeVersion = "1.18.1-39.0.9"
  mappingsChannel = "official"
  mappingsVersion = "1.18.1"
}

version = "${versionTag}.${commitCount}${snapshot}"
group = "net.awairo.minecraft.spawnchecker"
archivesBaseName = "spawnchecker-${minecraftVersion}"

sourceCompatibility = targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
  sourceCompatibility = targetCompatibility = javaVersion
  options.encoding = "UTF-8"
}

defaultTasks "clean", "build"

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  minecraft "net.minecraftforge:forge:${forgeVersion}"

  implementation 'com.google.code.findbugs:jsr305:3.0.2'

  compileOnly 'org.projectlombok:lombok:1.18.22'
  annotationProcessor "org.projectlombok:lombok:1.18.+"
  testCompileOnly 'org.projectlombok:lombok:1.18.22'
  testAnnotationProcessor "org.projectlombok:lombok:1.18.+"

  testImplementation 'org.mockito:mockito-core:4.2.0'
  testImplementation 'org.apiguardian:apiguardian-api:1.1.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
  // the mappings can be changed at any time, and must be in the following format.
  // snapshot_YYYYMMDD   snapshot are built nightly.
  // stable_#            stables are built at the discretion of the MCP team.
  // Use non-default mappings at your own risk. they may not always work.
  // simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: mappingsChannel, version: mappingsVersion
  // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      ideaModule "${project.name}.main"
      workingDirectory project.file("run/client")

      // Recommended logging data for a userdev environment
      property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

      // Recommended logging level for the console
      property "forge.logging.console.level", "debug"

      mods {
        spawnchecker {
          source sourceSets.main
        }
      }
    }

    server {
      ideaModule "${project.name}.main"
      workingDirectory project.file("run/server")

      // Recommended logging data for a userdev environment
      property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

      // Recommended logging level for the console
      property "forge.logging.console.level", "debug"

      environment "MOD_CLASSES", ""
    }

    data {
      ideaModule "${project.name}.main"
      workingDirectory project.file("run/data")

      // Recommended logging data for a userdev environment
      property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

      // Recommended logging level for the console
      property "forge.logging.console.level", "debug"

      args "--mod", "spawnchecker", "--all", "--output", file("src/generated/resources/")

      mods {
        spawnchecker {
          source sourceSets.main
        }
      }
    }
  }
}

//license {
//  header = project.file("LICENSE-HEADER.txt")
//  ext {
//    name = "alalwww"
//    years = "2021"
//  }
//
//  exclude "**/*.json"
//  exclude "**/*.mcmeta"
//  exclude "**/*.toml"
//}

task processModsTomlResources(type: Copy) {
  into(sourceSets.main.output.resourcesDir)
  from(sourceSets.main.resources) {
    include "META-INF/mods.toml"
  }
  filter { line ->
    switch (line) {
      case "version=\"{version}\"":
        return "version=\"${project.version}\""
      case "loaderVersion=\"{loaderVersion}\"":
        return "loaderVersion=\"${forgeVersionRange}\""
      case "  versionRange=\"{forgeVersionRange}\"":
        return "  versionRange=\"${forgeVersionRange}\""
      case "  versionRange=\"{minecraftVersionRange}\"":
        return "  versionRange=\"${minecraftVersionRange}\""
      default:
        return line
    }
  }
  filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("lf"))
}

processResources {
  dependsOn processModsTomlResources
  exclude "META-INF/mods.toml"
}

jar {
  into("META-INF") {
    from "LICENSE"
    from "CREDITS.md"
  }
  manifest {
    attributes "Specification-Title": "SpawnChecker"
    attributes "Specification-Vendor": "alalwww"
    attributes "Specification-Version": "3.0"
    attributes "Implementation-Title": project.group
    attributes "Implementation-Vendor": "alalwww"
    attributes "Implementation-Version": "${version}"
    attributes "Implementation-Timestamp": now(UTC).toString()
    attributes "CI-Build-Number": buildNumber
    attributes "Git-Commit-Hash": commitHash
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

task signJar {
  dependsOn "reobfJar"
  description = "signing jar file"

  def jarFile = jar.archivePath /* jar.archiveFile */

  inputs.file jarFile
  outputs.file jarFile

  if (project.hasProperty('signing_alias') && project.hasProperty('signing_storepass')) {
    doLast {
      logger.quiet('signJar: ' + jarFile)
      ant.signjar(
        jar: jarFile,
        alias: project.signing_alias,
        storepass: project.signing_storepass,
        preservelastmodified: true
      )
    }
  } else {
    doLast {
      logger.quiet('Skip signJar')
    }
  }
}

assemble.dependsOn "signJar"

logger.quiet("---------------------------------\n mod id: {}\nversion: {}\n commit: {}\n  build: {}\n---------------------------------", modid, version, commitHash, buildNumber)
